<?xml version="1.0" encoding="utf-8" ?>
<ContentView xmlns="http://schemas.microsoft.com/dotnet/2021/maui"
             xmlns:x="http://schemas.microsoft.com/winfx/2009/xaml"
             xmlns:local="clr-namespace:ExtendedDataEntry"
             x:Class="ExtendedDataEntry.DataEntry"
             x:DataType="local:DataEntry"
             x:Name="self">

	<VerticalStackLayout>
		<HorizontalStackLayout HorizontalOptions="Center">
			<Button x:Name="ButtonLock" Text="Lock"  Clicked="Button_ChangeEditMode" CommandParameter="Lock">
				<Button.Triggers>
					<DataTrigger TargetType="Button" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Locked">
						<Setter Property="BackgroundColor" Value="Yellow" />
					</DataTrigger>
				</Button.Triggers>
			</Button>
			<Button x:Name="ButtonHighlight" Text="Highlight" Clicked="Button_ChangeEditMode" CommandParameter="Highlight">
				<Button.Triggers>
					<DataTrigger TargetType="Button" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Highlight">
						<Setter Property="BackgroundColor" Value="Yellow" />
					</DataTrigger>
				</Button.Triggers>
			</Button>

			<Button x:Name="ButtonEdit" Text="Edit" Clicked="Button_ChangeEditMode" CommandParameter="Edit">
				<Button.Triggers>
					<DataTrigger TargetType="Button" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit">
						<Setter Property="BackgroundColor" Value="Yellow" />
					</DataTrigger>
				</Button.Triggers>
			</Button>

		</HorizontalStackLayout>
		
		<Border  StrokeThickness="1">
				<Grid>
						<!-- Label "Saved Text", visible only in EntryState "LOCK" -->
						<Label x:Name="EnteredText"
						       Text="{Binding Source={x:Reference self}, Path=SavedText}" >
							<Label.Triggers>
								<DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Locked">
									<Setter Property="IsVisible" Value="True" />
								</DataTrigger>
								<DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit">
									<Setter Property="IsVisible" Value="False" />
								</DataTrigger>
							</Label.Triggers>
						</Label>
						
						
						
						<!-- Text Cursor: Block as wide as 1 character in cyan -->
						<Label x:Name="TextCursor"
						       HorizontalOptions="Start"
						       VerticalOptions="Center" 
						       Opacity="0.85"
						       IsVisible="False">
							<Label.FormattedText>
								<FormattedString>
									<!-- <Span x:Name="ProposedTextSpan" Text="{Binding Source={x:Reference EnteredText}, Path=Text}" TextColor="Transparent"  BackgroundColor="Transparent"/> -->
									<Span x:Name="DraftTextSpan" TextColor="Red"  BackgroundColor="Transparent" PropertyChanged="textSpan_PropertyChanged"/>
									<Span x:Name="DraftTextAfterSpan" TextColor="Red"  BackgroundColor="Transparent" PropertyChanged="textSpan_PropertyChanged"/>
									<!-- <Span x:Name="CursorSpan" Text="x" BackgroundColor="Transparent" TextColor="Cyan" /> -->

								</FormattedString>
							</Label.FormattedText>
						</Label>
						<Label x:Name="CursorLabel" Text="█" BackgroundColor="Transparent" IsVisible="False" TextColor="Cyan" ZIndex="5"/>

						<!--This label is just to get width of DraftTextSpan text with reliable method-->
						<Label x:Name="tmpLabel" BackgroundColor="Transparent" TextColor="Transparent"/>

						<!-- Highlighter: Mirrors EnteredText in inverted colors -->
						<Label x:Name="Highlighter"
						       HorizontalOptions="Start"
						       VerticalOptions="Center" 
						       IsVisible="False">
							<Label.FormattedText>
								<FormattedString>
									<Span Text="{Binding Source={x:Reference EnteredText}, Path=Text}" TextColor="Black" BackgroundColor="Cyan"/>
								</FormattedString>
							</Label.FormattedText>
						</Label>


						<!--~1~ Label "DraftTextLabel", containing a Span with DraftText, visible in EntryState "EDIT"@1@
						<Label x:Name="DraftTextLabel"
						       HorizontalOptions="Start"
						       VerticalOptions="Center" 
						       Opacity="0.85"
						       IsVisible="False">
							<Label.FormattedText>
								<FormattedString>
									~1~ <Span x:Name="ProposedTextSpan" Text="{Binding Source={x:Reference EnteredText}, Path=Text}" TextColor="Transparent"  BackgroundColor="Transparent"/> @1@
									<Span x:Name="DraftTextSpan" TextColor="Red"  BackgroundColor="Transparent"/>
									~1~ <Span x:Name="CursorSpan" Text="█" BackgroundColor="Transparent" TextColor="Cyan" /> @1@
									~1~ <Span x:Name="CursorSpan" Text="x" BackgroundColor="Transparent" TextColor="Cyan" /> @1@

								</FormattedString>
							</Label.FormattedText>
							<Label.Triggers>
								<DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Locked">
									<Setter Property="IsVisible" Value="False" />
								</DataTrigger>
								<DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit">
									<Setter Property="IsVisible" Value="True" />
								</DataTrigger>
							</Label.Triggers>
						</Label>
						~1~ Label "TextCursor", containing a Span with a (invisible) copy of DraftText, visible in EntryState "EDIT"@1@
						<Label x:Name="TextCursorOverwrite"
						       HorizontalOptions="Start"
						       VerticalOptions="Center" 
						       Opacity="0.85"
						       IsVisible="False">
							<Label.FormattedText>
								<FormattedString>
									~1~ <Span x:Name="ProposedTextSpan" Text="{Binding Source={x:Reference EnteredText}, Path=Text}" TextColor="Transparent"  BackgroundColor="Transparent"/> @1@
									<Span x:Name="BeforeCursorInvisibleDraftTextSpan" TextColor="Transparent"  BackgroundColor="Transparent"/>
									~1~ <Span x:Name="CursorSpanInsert" Text="I" BackgroundColor="Transparent" TextColor="Cyan"/> @1@
									<Span x:Name="CursorSpanOverwrite" Text="█" BackgroundColor="Transparent" TextColor="Yellow"/>
									~1~ <Span x:Name="AfterCursorSpan" Text="█" BackgroundColor="Transparent" TextColor="Transparent"  /> @1@
									~1~ <Span x:Name="CursorSpan" Text="x" BackgroundColor="Transparent" TextColor="Cyan" /> @1@
								</FormattedString>
							</Label.FormattedText>
							<Label.Triggers>
								<MultiTrigger TargetType="Label">
								<MultiTrigger.Conditions>
									<BindingCondition Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit" />
									<BindingCondition Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.CursorInInsertMode}" Value="False" />
								</MultiTrigger.Conditions>
								<Setter Property="IsVisible" Value="True" />
								</MultiTrigger>
								~1~ <DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit"> @1@
								~1~ 	<Setter Property="IsVisible" Value="True" /> @1@
								~1~ </DataTrigger> @1@
							</Label.Triggers>
						</Label>
						
						~1~ Label "TextCursor", containing a Span with a (invisible) copy of DraftText, visible in EntryState "EDIT"@1@
						<Label x:Name="TextCursorInsert"
						       HorizontalOptions="Start"
						       VerticalOptions="Center" 
						       Opacity="0.85"
						       IsVisible="False">
							<Label.FormattedText>
								<FormattedString>
									~1~ <Span x:Name="ProposedTextSpan" Text="{Binding Source={x:Reference EnteredText}, Path=Text}" TextColor="Transparent"  BackgroundColor="Transparent"/> @1@
									<Span x:Name="BeforeInsertCursorInvisibleDraftTextSpan" TextColor="Transparent"  BackgroundColor="Transparent"/>
									<Span x:Name="CursorSpanInsert" Text="I" BackgroundColor="Transparent" TextColor="Cyan"/>
									~1~ <Span x:Name="AfterCursorSpan" Text="█" BackgroundColor="Transparent" TextColor="Transparent"  /> @1@
									~1~ <Span x:Name="CursorSpan" Text="x" BackgroundColor="Transparent" TextColor="Cyan" /> @1@
								</FormattedString>
							</Label.FormattedText>
							<Label.Triggers>
								<DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Locked">
									<Setter Property="IsVisible" Value="False" />
								</DataTrigger>
								<DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit">
									<Setter Property="IsVisible" Value="True" />
								</DataTrigger>
							</Label.Triggers>
						</Label>
						

						~1~ Label Highlighter: Mirrors SavedText in inverted colors,visible only in EntryState "HIGHLIGHT"  @1@
					<Label x:Name="Highlighter"
					       HorizontalOptions="Start"
					       VerticalOptions="Center" 
					       IsVisible="False">
						<Label.FormattedText>
							<FormattedString>
								<Span Text="{Binding Source={x:Reference EnteredText}, Path=Text}" TextColor="Black" BackgroundColor="Cyan"/>
							</FormattedString>
						</Label.FormattedText>
						<Label.Triggers>
							<DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Highlight">
								<Setter Property="IsVisible" Value="True" />
							</DataTrigger>
							~1~ <DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Lock"> @1@
							~1~ 	<Setter Property="IsVisible" Value="False" /> @1@
							~1~ </DataTrigger> @1@
							~1~ <DataTrigger TargetType="Label" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit"> @1@
							~1~ 	<Setter Property="IsVisible" Value="False" /> @1@
							~1~ </DataTrigger> @1@
						</Label.Triggers>
					</Label>
					-->
					

						
						
						
					
				</Grid>
			<Border.GestureRecognizers>
				<TapGestureRecognizer Tapped="TapGestureRecognizer_OnTapped"/>
			</Border.GestureRecognizers>
			<Border.Triggers>
				<DataTrigger TargetType="Border" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Edit">
						<Setter Property="Stroke" Value="Cyan" />
				</DataTrigger>
				<DataTrigger TargetType="Border" Binding="{Binding Source={x:Reference EnteredText}, Path=BindingContext.EntryState}" Value="Highlight">
					<Setter Property="Stroke" Value="Cyan" />
				</DataTrigger>
			</Border.Triggers>
			</Border>
		

		<BoxView HeightRequest="1" BackgroundColor="White" HorizontalOptions="FillAndExpand"	/> 
		<HorizontalStackLayout HorizontalOptions="Center">
			<Button Text="←" Clicked="Button_OnClickedSpecial" CommandParameter="←" />
			<Button Text="→"  Clicked="Button_OnClickedSpecial" CommandParameter="→" />
			<Button Text="←DEL" Clicked="Button_OnClickedSpecial" CommandParameter="BACKSPACE"/>
			<Button Text="STORE" Clicked="Button_OnClickedSpecial" CommandParameter="ENTER"/>
			<Button Text="ESC" Clicked="Button_OnClickedSpecial" CommandParameter="ESC" />
		</HorizontalStackLayout>
		<HorizontalStackLayout HorizontalOptions="Center">
			<Button Text="A" Clicked="Button_OnClicked" CommandParameter="A" />
			<Button Text="B"  Clicked="Button_OnClicked" CommandParameter="B"  />
			<Button Text="C"  Clicked="Button_OnClicked" CommandParameter="C"  />
		</HorizontalStackLayout>

	</VerticalStackLayout>
                
            

</ContentView>
